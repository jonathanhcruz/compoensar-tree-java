<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Node/NodeActions.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Node/NodeActions.java" />
              <option name="originalContent" value="package Node;&#10;&#10;import CustomSystem.Input.SystemGetInput;&#10;&#10;import java.util.Objects;&#10;&#10;public class NodeActions {&#10;&#10;    public void CreateTree( Node root ) {&#10;        System.out.println(&quot;Response Yes or No&quot;);&#10;        SystemGetInput questionLeft = new SystemGetInput(&quot;Do you want to add a Node to the left to Node &quot; + root.getValue() + &quot; ?&quot;);&#10;        String leftAnswer = questionLeft.getResponse().toLowerCase();&#10;&#10;        if(Objects.equals(leftAnswer, &quot;y&quot;) || Objects.equals(leftAnswer, &quot;yes&quot;)) {&#10;            SystemGetInput questionValueNode = new SystemGetInput(&quot;witch is the Node Value?&quot;);&#10;            String nodeValue = questionValueNode.getResponse();&#10;            Node leftNode = new Node(nodeValue);&#10;&#10;            root.setLeft(leftNode);&#10;            CreateTree(leftNode);&#10;&#10;        } else if (Objects.equals(leftAnswer, &quot;n&quot;) || Objects.equals(leftAnswer, &quot;no&quot;)) {&#10;            SystemGetInput questionRight= new SystemGetInput(&quot;Do you want to add a Node to the right to Node &quot; + root.getValue() + &quot; ?&quot;);&#10;            String insertRight = questionRight.getResponse().toLowerCase();&#10;&#10;            if(Objects.equals(insertRight, &quot;y&quot;) || Objects.equals(insertRight, &quot;yes&quot;)) {&#10;                SystemGetInput questionValueNode = new SystemGetInput(&quot;witch is the Node Value?&quot;);&#10;                String nodeValue = questionValueNode.getResponse();&#10;                Node rightNode = new Node(nodeValue);&#10;&#10;                root.setRight(rightNode);&#10;                CreateTree(rightNode);&#10;&#10;                return;&#10;            } else if (Objects.equals(insertRight, &quot;n&quot;) || Objects.equals(insertRight, &quot;no&quot;)) {&#10;                return;&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;you didn't choose a valid option&quot;);&#10;        CreateTree(root);&#10;    }&#10;&#10;    public static int getHeightTree (Node root) {&#10;        return 1;&#10;    }&#10;&#10;    public Node deepFirstSearch(Node root, String value) {&#10;        if (root == null) {&#10;            return null;&#10;        }&#10;&#10;        if (Objects.equals(root.getValue(), value)) {&#10;            return root;&#10;        }&#10;&#10;        Node leftResult = deepFirstSearch(root.getLeft(), value);&#10;        if (leftResult != null) {&#10;            return leftResult;&#10;        }&#10;&#10;        return deepFirstSearch(root.getRight(), value);&#10;    }&#10;&#10;    public void showTree(Node root) {&#10;        if (root == null) {&#10;            return;&#10;        }&#10;        System.out.println(root.getValue());&#10;        showTree(root.getLeft());&#10;        showTree(root.getRight());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package Node;&#10;&#10;import CustomSystem.Input.SystemGetInput;&#10;&#10;import java.util.Objects;&#10;&#10;public class NodeActions {&#10;&#10;    public void CreateTree( Node root ) {&#10;        System.out.println(&quot;Response Yes or No&quot;);&#10;        SystemGetInput questionLeft = new SystemGetInput(&quot;Do you want to add a Node to the left to Node &quot; + root.getValue() + &quot; ?&quot;);&#10;        String leftAnswer = questionLeft.getResponse().toLowerCase();&#10;&#10;        if(Objects.equals(leftAnswer, &quot;y&quot;) || Objects.equals(leftAnswer, &quot;yes&quot;)) {&#10;            SystemGetInput questionValueNode = new SystemGetInput(&quot;witch is the Node Value?&quot;);&#10;            String nodeValue = questionValueNode.getResponse();&#10;            Node leftNode = new Node(nodeValue);&#10;&#10;            root.setLeft(leftNode);&#10;            CreateTree(leftNode);&#10;&#10;        } else if (Objects.equals(leftAnswer, &quot;n&quot;) || Objects.equals(leftAnswer, &quot;no&quot;)) {&#10;            SystemGetInput questionRight= new SystemGetInput(&quot;Do you want to add a Node to the right to Node &quot; + root.getValue() + &quot; ?&quot;);&#10;            String insertRight = questionRight.getResponse().toLowerCase();&#10;&#10;            if(Objects.equals(insertRight, &quot;y&quot;) || Objects.equals(insertRight, &quot;yes&quot;)) {&#10;                SystemGetInput questionValueNode = new SystemGetInput(&quot;witch is the Node Value?&quot;);&#10;                String nodeValue = questionValueNode.getResponse();&#10;                Node rightNode = new Node(nodeValue);&#10;&#10;                root.setRight(rightNode);&#10;                CreateTree(rightNode);&#10;&#10;                return;&#10;            } else if (Objects.equals(insertRight, &quot;n&quot;) || Objects.equals(insertRight, &quot;no&quot;)) {&#10;                return;&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;you didn't choose a valid option&quot;);&#10;        CreateTree(root);&#10;    }&#10;&#10;    public static int getHeightTree (Node root) {&#10;        return 1;&#10;    }&#10;&#10;    public Node deepFirstSearch(Node root, String value) {&#10;        if (root == null) {&#10;            return null;&#10;        }&#10;&#10;        if (Objects.equals(root.getValue(), value)) {&#10;            return root;&#10;        }&#10;&#10;        Node leftResult = deepFirstSearch(root.getLeft(), value);&#10;        if (leftResult != null) {&#10;            return leftResult;&#10;        }&#10;&#10;        return deepFirstSearch(root.getRight(), value);&#10;    }&#10;&#10;    public void showTree(Node root) {&#10;        if (root == null) {&#10;            return;&#10;        }&#10;        System.out.println(root.getValue());&#10;        showTree(root.getLeft());&#10;        showTree(root.getRight());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>